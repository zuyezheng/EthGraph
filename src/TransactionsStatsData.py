import pandas

from src.EthTransactions import EthTransactions
from src.TimeSpan import TimeSpan


class TransactionsStatsData:
    """
    Load transactions stats generated by EthTransactions.

    @author zuye.zheng
    """

    def __init__(self,
        loc: str,
        span: TimeSpan,
        min_time_step: int = None,
        max_time_step: int = None
    ):
        self.span = span

        # load the transactions and do any necessary clipping
        self.stats = pandas.read_parquet(loc)
        if min_time_step is not None:
            self.stats = self.stats[self.stats['time_span'] >= min_time_step]
        if max_time_step is not None:
            self.stats = self.stats[self.stats['time_span'] <= max_time_step]

        metrics = ['num_transactions', 'num_blocks', 'num_froms', 'num_tos']
        for field in EthTransactions.METRICS:
            for agg in ['sum', 'stdev', 'skewness', 'kurtosis']:
                metrics.append(agg + '_' + field)

        # standardize all of the metrics (some dont make sense like standard deviations), but easier to do them all
        for metric in metrics:
            metric_mean = self.stats[metric].mean()
            metric_std = self.stats[metric].std()

            self.stats[metric + '_s'] = (self.stats[metric] - metric_mean) / metric_std
